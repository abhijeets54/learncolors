   class Stack {
            constructor(maxSize = 5) {
                this.items = [];
                this.maxSize = maxSize;
            }
            
            push(element) {
                if(this.items.length === this.maxSize) {
                    this.items.pop();
                }
                this.items.unshift(element);
            }
            
            pop() {
                if(this.isEmpty()) return null;
                return this.items.shift();
            }
            
            peek() {
                if(this.isEmpty()) return null;
                return this.items[0];
            }
            
            isEmpty() {
                return this.items.length === 0;
            }

            getItems() {
                return [...this.items];
            }
        }

        // Array of basic colors
        const COLORS = [
            { name: 'Red', hex: '#FF0000' },
            { name: 'Blue', hex: '#0000FF' },
            { name: 'Green', hex: '#008000' },
            { name: 'Yellow', hex: '#FFFF00' },
            { name: 'Purple', hex: '#800080' },
            { name: 'Orange', hex: '#FFA500' },
            { name: 'Brown', hex: '#8B4513' },
            { name: 'Black', hex: '#000000' },
            { name: 'White', hex: '#FFFFFF' },
            { name: 'Gray', hex: '#808080' },
            { name: 'Pink', hex: '#FFC0CB' },
            { name: 'Navy', hex: '#000080' },
            { name: 'Maroon', hex: '#800000' },
            { name: 'Teal', hex: '#008080' },
            { name: 'Gold', hex: '#FFD700' }
        ];

        // Performance tracking array
        let colorPerformance = COLORS.map(color => ({
            name: color.name,
            attempts: 0,
            correct: 0
        }));

        // Game state variables
        let score = 0;
        let streak = 0;
        let attempts = 0;
        let currentColor = null;
        let recentColors = new Stack(5);

        // Bubble sort for performance ranking
        function sortPerformance() {
            let arr = [...colorPerformance];
            for(let i = 0; i < arr.length; i++) {
                for(let j = 0; j < arr.length - i - 1; j++) {
                    let rate1 = arr[j].attempts === 0 ? 0 : (arr[j].correct / arr[j].attempts);
                    let rate2 = arr[j+1].attempts === 0 ? 0 : (arr[j+1].correct / arr[j+1].attempts);
                    if(rate1 < rate2) {
                        [arr[j], arr[j+1]] = [arr[j+1], arr[j]];
                    }
                }
            }
            return arr;
        }

        // Generate options using selection sort for difficulty
        function generateOptions(correctColor) {
            let options = [correctColor];
            let availableColors = COLORS.filter(c => c !== correctColor);
            
            // Selection sort based on performance (to mix easy and hard colors)
            for(let i = 0; i < availableColors.length; i++) {
                let minIdx = i;
                for(let j = i + 1; j < availableColors.length; j++) {
                    let perf1 = colorPerformance.find(p => p.name === availableColors[minIdx].name);
                    let perf2 = colorPerformance.find(p => p.name === availableColors[j].name);
                    let rate1 = perf1.attempts === 0 ? 0 : (perf1.correct / perf1.attempts);
                    let rate2 = perf2.attempts === 0 ? 0 : (perf2.correct / perf2.attempts);
                    if(rate1 > rate2) minIdx = j;
                }
                if(minIdx !== i) {
                    [availableColors[i], availableColors[minIdx]] = 
                    [availableColors[minIdx], availableColors[i]];
                }
            }
            
            // Select 3 more colors (mix of easy and difficult)
            options.push(availableColors[0]); // Most difficult
            options.push(availableColors[Math.floor(availableColors.length / 2)]); // Medium
            options.push(availableColors[availableColors.length - 1]); // Easiest
            
            // Shuffle options
            return options.sort(() => Math.random() - 0.5);
        }

        function updateDisplay() {
            document.getElementById('score').textContent = score;
            document.getElementById('streak').textContent = streak;
            document.getElementById('attempts').textContent = attempts;
            
            // Update stack display
            const stackItems = recentColors.getItems();
            document.getElementById('stackDisplay').innerHTML = stackItems
                .map(color => `<span class="color-item">${color.name}</span>`)
                .join('');
            
            // Update performance list
            const sortedPerformance = sortPerformance().slice(0, 5);
            document.getElementById('performanceList').innerHTML = sortedPerformance
                .map(p => {
                    const rate = p.attempts === 0 ? 0 : Math.round((p.correct / p.attempts) * 100);
                    return `<div class="performance-item">
                        <span>${p.name}</span>
                        <span>${rate}% (${p.correct}/${p.attempts})</span>
                    </div>`;
                })
                .join('');
        }

        function startGame() {
            let color = COLORS[Math.floor(Math.random() * COLORS.length)];
            currentColor = color;
            document.getElementById('colorDisplay').style.backgroundColor = color.hex;
            recentColors.push(color);

            const options = generateOptions(color);
            document.getElementById('options').innerHTML = options
                .map(option => `<button class="color-btn" onclick="checkAnswer('${option.name}')">${option.name}</button>`)
                .join('');
        }

        function checkAnswer(selectedColor) {
            attempts++;
            const feedbackElement = document.getElementById('feedback');
            const performanceRecord = colorPerformance.find(p => p.name === currentColor.name);
            performanceRecord.attempts++;
            
            if (selectedColor === currentColor.name) {
                feedbackElement.textContent = "Correct!";
                feedbackElement.style.color = "green";
                score++;
                streak++;
                performanceRecord.correct++;
            } else {
                feedbackElement.textContent = "Try again!";
                feedbackElement.style.color = "red";
                streak = 0;
            }
            updateDisplay();
            startGame();
        }

        window.onload = startGame;